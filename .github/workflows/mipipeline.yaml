name: Mi Pipeline (slack)

on:
  push:
    branches: [ BuildDocker ]
  pull_request:
    branches: [ BuildDocker ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:   
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID2 }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY2 }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
     
#    - name: Unit tests Before
#      id: unit-test-before
#      run: |
#        wget -O phpunit https://phar.phpunit.de/phpunit-7.phar
#        php -v
#        chmod 777 phpunit
#        ./phpunit --version
        
    - name: Build, tag, and push image to Amazon ECR
      id: debeers-build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: debeers-fyf-registry
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t fyfsystemimage:latest -f 3system-image.dockerfile .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f 3distribution-image.dockerfile .
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    


    - name: Unit Tests
      id: debeers-test-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: debeers-fyf-registry
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        echo "vienen imagenes"
        docker images
        echo "vienen contenedores"
        docker container ls
        echo "viene hello world"
        docker run hello-world
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
#    - uses: mirromutth/mysql-action@v1.1
#      with:
#        host port: 3306 
#        container port: 3306
#        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
#        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
#        mysql version: '5.7' 
#        mysql database: 'uat_fyf' 
#        mysql root password: 'symfony' 
#        mysql user: 'appuser' 
#        mysql password: 'symfony' 
    
#    - name: Send status to Slack workflow
#      if: ${{ failure() }}
#      id: slack-build-notification
#      uses: slackapi/slack-github-action@v1.16.0
#      with:
#        payload: "{\"build_number\":\"${{ github.run_id }}\",\"additional_info_url\":\"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" 
#      env:
#        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BACKEND_BUILDS_WEBHOOK_URL }}    

    - name: Download task definition
      id: dw-task-def
      run: |
        aws ecs describe-task-definition --task-definition debeers-fyf-taskdefinition --query taskDefinition > task-definition-debeers.json    
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: debeers-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-debeers.json
        container-name: debeers-fyf-web-app
        image: ${{ steps.debeers-build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
       task-definition: ${{ steps.debeers-task-def.outputs.task-definition }}
       service: debeers-service
       cluster: debeers-cluster
       wait-for-service-stability: false
