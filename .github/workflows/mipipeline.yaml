name: Mi Pipeline (slack)

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags' 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:   
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID2 }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY2 }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
          
    - name: Enable PHP 7.2
      id: php-72
      if: ${{ false }}
      run: |
        # Install and enable PHP 7.2
        echo "la version de php es"
        php -v
        echo "Voy a desinstalar"
        echo Log level es: ${{ github.event.inputs.logLevel }}
        sudo apt-get purge php8.*
        sudo apt-get autoclean
        sudo apt-get autoremove
        echo "Voy a instalar la versión 7.2"
        sudo add-apt-repository ppa:ondrej/php
        sudo apt install php7.2
        sudo update-alternatives --set php /usr/bin/php7.2
        echo "Voy a habilitarlo"
        sudo a2enmod php7.2
        sudo systemctl restart apache2
        echo "la version que quedó ahora es"
        php -v
        
    - name: Unit tests Before
      id: unit-test-before
      if: ${{ false }}
      run: |
        wget -O phpunit https://phar.phpunit.de/phpunit-7.phar
        php -v
        chmod 777 phpunit
        mkdir -p fyfshare/reservations/{csv,pdf}
        mkdir -p fyfshare/{import,export,phpunitlog}
        ls -la
        echo "LS PWD"
        ls $PWD
        echo "LS FYFSHARE"
        ls fyfshare
        echo "LS FYFSHARE/reservations"
        ls fyfshare/reservations
        ./phpunit --version
        
    - name: Build, tag, and push image to Amazon ECR
      id: debeers-build-image
      if: ${{ false }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: debeers-fyf-registry
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t fyfsystemimage:latest -f 3system-image.dockerfile .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f 3distribution-image.dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Unit Tests
      id: debeers-test-image
      if: ${{ false }}      
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: debeers-fyf-registry
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        echo "vienen imagenes"
        docker images
        echo "vienen contenedores"
        docker container ls
        echo "viene hello world"
        docker run hello-world
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
  
#    - name: Send status to Slack workflow
#      if: ${{ failure() }}
#      id: slack-build-notification
#      uses: slackapi/slack-github-action@v1.16.0
#      with:
#        payload: "{\"build_number\":\"${{ github.run_id }}\",\"additional_info_url\":\"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" 
#      env:
#        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BACKEND_BUILDS_WEBHOOK_URL }}    

    - name: Download task definition
      id: dw-task-def
      run: |
        aws ecs describe-task-definition --task-definition public-taskdef --query taskDefinition > public-taskdef.json    
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: debeers-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: public-taskdef.json
        container-name: public-container2
        image: public.ecr.aws/o2w9d2u1/hl-testing-repo:latest
        environment-variables: |
            PREFIX_2=NUEVO_VALOR


    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
       task-definition: ${{ steps.debeers-task-def.outputs.task-definition }}
       service: public-service3
       cluster: public-debeers-testing
       wait-for-service-stability: true
